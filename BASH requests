Основы линукс Введение в bash
httpslinuxgeeks.rubash-intro.htm

$ git --version
$ git config --global user.name Tatiana
$ git config --global user.email taty@gmail.com
$ git config --global color.ui auto
$ git config --list #see setted config-s
use Q to get out of (END)

cd - change directory
cd .. - one level up
cd ../.. - two level up
ls - list #all files in the directory

mkdir TestDir #make directory
$ touch test.txt #create file
$ cp test.txt text_copy.txt #make a copy of ... as ...
$ mv test.txt test_original.txt #move (rename) a copy of ... as ...
$ echo 'Hello' > test_original.txt #write a text into file
$ cat test_original.txt #read text inside file

$ rm text_copy.txt #remove (delete) file
$ rm -rf yes TestDir # == delete an NOT empty directory !a recursive force
$ rm -R Test # == delete an NOT empty directory !a recursive force
$ rmdir Test #remove an empty directory



REPOSITORY
$ git init #Initialized empty Git repository in C:/Users/user/Desktop/repo/.git/
$ ls -a #shows a hidden objects
./  ../  .git/
$ git status # files: RED (not commited, but added to rep.), GREEN (commited)
On branch master #we here
No commits yet
nothing to commit (create/copy files and use "git add" to track)

$ git remote add origin https://github.com/TatiOz/repo-github.git #add a link from git into local repository

$ git remote -v #show list of remote conections

origin  https://github.com/TatiOz/repo-github.git (fetch)
origin  https://github.com/TatiOz/repo-github.git (push)

1) $ git add <file> #to add to rep.
$ git restore --staged <file> #to unstage file
$ git add . #add all files on dir

2) 
$ git commit 
  +write message with :wq at the end??
$ git commit -m'commit message' -write a commit without redactor

1+2) git commit -am 'commit message' (git commit + git add + message)

$ touch images/.gitkeep #make a hidden file in folder visible

$ ls -a images
./  ../  .gitkeep
and after that images RED

$ touch .gitignore #file with ignored for adding index (commitment?)
$ echo 'config' > .gitignore #add name of file into .gitignore



#HISTORY
$ git log #to see commits change history + comments
$ git log --oneline #compact version
$ git log --oneline --graph --all
$ git reflog #to see commits change history + OTHER changes (del, reset, cancel)+ comments

$ git reset 0d1c1c9 #we go back to the chosen commit
$ git revert 5c349f3 #create a new commit which canceled actions made in the previous commit



#BRANCH
$ git branch
* main #*shows wherewe are

$ git branch dev #adding a branch

$ git checkout dev
Switched to branch 'dev'

$ git branch dev-master master
       (name of branch) (where to create branch)

$ git checkout -b dev-test
Switched to a new branch 'dev-test' #if it not exist ->create a new branch 

$ ssh-keygen
Generating public/private ed25519 key pair.
Enter file in which to save the key (/c/Users/user/.ssh/id_ed25519):
...

$ cat  /c/Users/user/.ssh/id_ed25519.pubcat 

$ git clone git@github.com:T/ptoject.git project 
                     (ssh link from git) (where to add)
$ git push #to load changes on git

$ git push --set-upstream origin <dev>  #to upload to gitHAB PART OF BRANCH
                    (remore rep) (what we want to load)
== $ git push -u origin dev
$ git push <origin> --all #to upload to gitHAB ALL OF BRANCH
$ git push <origin> --mirror #?is better? #to upload to gitHAB ALL OF BRANCH
https://git-scm.com/docs/git-push#git-push---mirror

$ git pull #to load changes from gitHAB 

ADDITINAL
https://stackoverflow.com/questions/12799719/how-to-upload-a-project-to-github

$ git stash push --include-untracked
If you want remove all local changes - including files that are untracked by git 
- from your working copy, simply stash them:

$ git stash drop
If you don't need them anymore, you now can drop that stash


If you don't want to stash changes that you already staged - e.g. with git add - 
then add the option $ --keep-index. 
Note however, 
that this will still prevent merging if those staged changes collide with the ones from upstream.


to override all local changes and does not require an identity:
$ git reset --hard
$ git pull

$ git fetch #download updates (to update a new branch -> need to $ git checkout <a new branch>)

$ git merge dev (we on main)
$ git branch -d <branch-1> <branch-2> (we on main and want to merge 2 branches and after delele them)
$ git push --delete origin branch-2-1 #add info to gitHUB about delited branch
$ git push <origin> --mirror #?is better? #to upload to gitHAB ALL changes
g
$ git rebase <main> (we on branch and want to rebase at the end of main from the start of the branch) # 

$ git push
To https://github.com/TatiOz/KrakRepo.git
 ! [rejected]        feature1 -> feature1 (non-fast-forward)
error: failed to push some refs to 'https://github.com/TatiOz/KrakRepo.git'

TO SUBMIT CHANGES to gitHUBme
$ git push --force


TAGS
$ git tag 1.0.0 #to put a tag
$ git tag -a 0.0.1 bb5424f -m'Put a tag on an older place'


$ git tag
1.0.0
oldold

$ git tag --list
1.0.0
oldold

$ git push --tags

$ git tag -d 1.0.1 #delete a tag
$ git push --delete origin <1.0.1> #from remote repo

#PULL-REQUEST

#STASH
$ git stash #save all changes for the branch only

$ git stash list # to see all stashes for now

$ git stash push dev-branch.md #to add the file to the current branch

$ git stash pop stash@{0}


#SQUASH -СКЛЕИТЬ
1)
$ git merge <squash-dev> --squash
# take changes from the branch, but without commit

2)
$ git rebase -i HEAD~X  #from the first commit where we want to squash X commits 
+ rewrite actions in file
pick
pick->f
pick->f

$ git reset --hard #reset to the last commit


#CHERRY PICK
$ git cherry-pick a8f3fd2 #we are on the branch and add from ### where we want to see changes
                  <commit> #add commit on the branch
                  <branch> #add commit the last commit from the <branch> on the current branch
                ..<branch> #add commit ALL commits from the <branch> on the current branch

#AMEND
we commited a file (add, commit), but it was not correct
now we want to fix it

$ echo 'text' <file> # firstly, make changes in the file
$ git add .          # add the repo
$ git commit --amend (write at the end of file ==> :wq) # and rewrite the last commit

$ git reflog #hach# # and go back to the previous commit

















